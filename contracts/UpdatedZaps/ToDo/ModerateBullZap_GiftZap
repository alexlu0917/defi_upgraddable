// Copyright (C) 2019, 2020 dipeshsukhani, nodarjonashi, toshsharma, suhailg

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// Visit <https://www.gnu.org/licenses/>for a copy of the GNU Affero General Public License

/**
 * WARNING: This is an upgradable contract. Be careful not to disrupt
 * the existing storage layout when making upgrades to the contract. In particular,
 * existing fields should not be removed and should not have their types changed.
 * The order of field declarations must not be changed, and new fields must be added
 * below all existing declarations.
 *
 * The base contracts and the order in which they are declared must not be changed.
 * New fields must not be added to base contracts (unless the base contract has
 * reserved placeholder fields for this purpose).
 *
 * See https://docs.zeppelinos.org/docs/writing_contracts.html for more info.
*/

pragma solidity ^0.5.0;

import "../../../node_modules/@openzeppelin/upgrades/contracts/Initializable.sol";
import "../../../node_modules/@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";
import "../../../node_modules/@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol";


interface Invest2_sBTC {
    function LetsInvestin_sBTC(address payable _toWhomToIssue) external payable returns(uint);
}

interface Invest2_sETH {
    function LetsInvestin_sETH(address payable _toWhomToIssue) external payable returns(uint);
}



contract ModerateBullZap is Initializable {
    using SafeMath for uint;
    
    // state variables
    
    // - THESE MUST ALWAYS STAY IN THE SAME LAYOUT
    bool private stopped;
    address payable public owner;
    Invest2_sBTC public Invest2_sBTCContract;
    Invest2_sETH public Invest2_sETHContract;
    

    // circuit breaker modifiers
    modifier stopInEmergency {if (!stopped) _;}
    modifier onlyInEmergency {if (stopped) _;}
    
   

    // this function should be called should we ever want to change the underlying Invest2_sETHContract address
    function set_Invest2_sETHContract (Invest2_sETH _Invest2_sETHContract) onlyOwner public {
        Invest2_sETHContract = _Invest2_sETHContract;
    }
    
    // this function should be called should we ever want to change the underlying Invest2_sBTCContract address
    function set_Invest2_sBTCContract (Invest2_sBTC _Invest2_sBTCContract) onlyOwner public {
        Invest2_sBTCContract = _Invest2_sBTCContract;
    }
    
    // this function should be called should we ever want to change the sBTC Contract address
    function set_sBTCContract(ERC20 _sBTCContract) onlyOwner public {
        sBTCContract = _sBTCContract;
    }
    
    // this function should be called should we ever want to change the sETH Contract address
    function set_sETHContract(ERC20 _sETHContract) onlyOwner public {
        sETHContract = _sETHContract;
    }
    
    // main function which will make the investments
    function LetsInvest(address payable _toWhomToIssue, uint _sBTCPercentage, uint _slippage) stopInEmergency public payable returns(uint) {
        require(_sBTCPercentage >= 0 || _sBTCPercentage <= 100, "wrong allocation");
        uint sBTCPortion = SafeMath.div(SafeMath.mul(msg.value,sBTCPercentage),100);
        uint sETHPortion = SafeMath.sub(msg.value, sBTCPortion);
        require (SafeMath.sub(msg.value, SafeMath.add(sBTCPortion, sETHPortion))==0,"Cannot split incoming ETH appropriately");
        Invest2_sBTCContract.LetsInvestin_sBTC.value(sBTCPortion)(_toWhomToIssue);
        Invest2_sETHContract.LetsInvestin_sETH.value(sETHPortion)(_toWhomToIssue);
    }
    
    // fallback protective function in case of failure
    function checkAndWithdraw_sBTC() onlyOwner public {
        uint sBTCUnits = sBTCContract.balanceOf(address(this));
        sBTCContract.transfer(owner,sBTCUnits);
    }
    
    function checkAndWithdraw_sETH() onlyOwner public {
        uint sETHUnits = sETHContract.balanceOf(address(this));
        sETHContract.transfer(owner,sETHUnits);
    }
    
    
    // fx in relation to ETH held by the contract sent by the owner
    
    // - this function lets you deposit ETH into this wallet
    function depositETH() payable public onlyOwner returns (uint) {
        balance += msg.value;
    }
    
    // - fallback function let you / anyone send ETH to this wallet without the need to call any function
    function() external payable {
        if (msg.sender == owner) {
            depositETH();
        } else {
            LetsInvest(msg.sender);
        }
    }
    
    // - to withdraw any ETH balance sitting in the contract
    function withdraw() onlyOwner public{
        owner.transfer(address(this).balance);
    }

    function _destruct() public onlyOwner {
        selfdestruct(owner);
    }
    
}